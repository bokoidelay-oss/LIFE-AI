import express from "express";
import cors from "cors";
import bodyParser from "body-parser";
import { GoogleGenerativeAI } from "@google/generative-ai";

const app = express();

// Configuration CORS pour permettre les requÃªtes depuis n'importe quel domaine
app.use(cors({
  origin: "*",
  methods: ["GET", "POST", "OPTIONS"],
  allowedHeaders: ["Content-Type", "Authorization"]
}));

app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));

// Initialisation de l'API Google Generative AI
const genAI = new GoogleGenerativeAI(process.env.GOOGLE_API_KEY || "TA_CLE_API_ICI");

// Route de test pour vÃ©rifier que le serveur fonctionne
app.get("/", (req, res) => {
  res.json({
    message: "ğŸš€ Serveur LIFE AI SantÃ© fonctionne !",
    status: "active",
    timestamp: new Date().toISOString()
  });
});

// Route pour les requÃªtes de santÃ©
app.post("/api/message", async (req, res) => {
  const { text } = req.body;
  
  if (!text || text.trim() === "") {
    return res.status(400).json({ 
      error: "Message vide",
      message: "Veuillez fournir un message valide"
    });
  }

  try {
    // Configuration du modÃ¨le Gemini
    const model = genAI.getGenerativeModel({ model: "gemini-pro" });
    
    // Prompt spÃ©cialisÃ© pour les questions de santÃ©
    const prompt = `Tu es LIFE AI, un assistant mÃ©dical intelligent et bienveillant. RÃ©ponds Ã  cette question de santÃ© de maniÃ¨re professionnelle, prÃ©cise et accessible. Si la question nÃ©cessite un diagnostic mÃ©dical urgent, recommande de consulter un professionnel de santÃ©.

Question: ${text}

RÃ©ponds en franÃ§ais, de maniÃ¨re claire et structurÃ©e:`;

    const result = await model.generateContent(prompt);
    const response = await result.response;
    const reply = response.text();

    res.json({ 
      reply: reply,
      timestamp: new Date().toISOString(),
      model: "gemini-pro"
    });

  } catch (error) {
    console.error("Erreur API Google Generative AI:", error);
    
    // RÃ©ponse de fallback en cas d'erreur
    const fallbackResponse = "Je rencontre actuellement des difficultÃ©s techniques. Pour des questions mÃ©dicales urgentes, veuillez consulter un professionnel de santÃ© ou contacter les services d'urgence.";
    
    res.status(500).json({ 
      error: "Erreur serveur IA",
      reply: fallbackResponse,
      details: error.message
    });
  }
});

// Route pour vÃ©rifier la santÃ© de l'API
app.get("/api/health", (req, res) => {
  res.json({
    status: "healthy",
    service: "LIFE AI SantÃ©",
    version: "1.0.0",
    timestamp: new Date().toISOString()
  });
});

// Gestion des erreurs 404
app.use("*", (req, res) => {
  res.status(404).json({
    error: "Route non trouvÃ©e",
    message: "Cette route n'existe pas sur le serveur LIFE AI"
  });
});

// Configuration du port
const PORT = process.env.PORT || 3000;

app.listen(PORT, () => {
  console.log(`ğŸš€ Serveur LIFE AI lancÃ© sur le port ${PORT}`);
  console.log(`ğŸ“± PrÃªt pour les requÃªtes mobiles`);
  console.log(`ğŸ”— URL locale: http://localhost:${PORT}`);
});
